/**
 闭包是一个可以赋值为变量或者作为参数传入到函数里的匿名函数。
 不同于函数，闭包允许捕获调用者作用域中的值

 闭包可以通过三种方式捕获其环境，他们直接对应函数的三种获取参数的方式：
 获取所有权，可变借用和不可变借用。

 这三种捕获值的方式被编码为如下三个 Fn trait：
FnOnce 消费从周围作用域捕获的变量，闭包周围的作用域被称为其 环境，environment。为了消费捕获到的变量，闭包必须获取其所有权并在定义闭包时将其移动进闭包。其名称的 Once 部分代表了闭包不能多次获取相同变量的所有权的事实，所以它只能被调用一次。
FnMut 获取可变的借用值所以可以改变其环境
Fn 从其环境获取不可变的借用值
当创建一个闭包时，Rust 根据其如何使用环境中变量来推断我们希望如何引用环境。由于所有闭包都可以被调用至少一次，所以所有闭包都实现了 FnOnce 。
那些并没有移动被捕获变量的所有权到闭包内的闭包也实现了 FnMut ，而不需要对被捕获的变量进行可变访问的闭包则也实现了 Fn

如果你希望强制闭包获取其使用的环境值的所有权，可以在参数列表前使用 move 关键字

使用外部环境变量，实际是 对变量进行Copy   普通基础类型因为是直接实现了，所以不用implement Copy   而其他引用类型则需要实现


闭包的语法: |params| {expr}

***/

fn main() {
}

#[test]
fn FN_01() {
    //mut 可变借用
    let mut a = 1;
    let mut print = || {
        & a;
    };

    let cc = & a; // 这里编译报错, mutable borrow occurs here
    print();
}

#[test]
fn mainss() {
    let mut a = 1;

    {
        & a;
        &mut a;
    }

    let aa = & a;

    let bb = &mut a;
}